import streamlit as st
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler

st.set_page_config(
    page_title="Chia t·∫≠p hu·∫•n luy·ªán, validation v√† ki·ªÉm tra",
    page_icon="üåê",
)
page_bg_img = """
<style>
[data-testid="stAppViewContainer"] {
  background-image: url("");

    
    background-size: 100% 100%;
}
[data-testid="stHeader"]{
    background: rgba(0,0,0,0);
}
[data-testid="stToolbar"]{
    right:2rem;
}
[data-testid="stSidebar"] > div:first-child {
    background-image: url("");
    background-position: center;
}
</style>
"""
st.markdown(page_bg_img,unsafe_allow_html=True)

st.title("Ph√¢n chia c√°c t·∫≠p")

# Ki·ªÉm tra d·ªØ li·ªáu
if 'filtered_data' not in st.session_state:
    st.warning("‚ö†Ô∏è Vui l√≤ng x·ª≠ l√Ω d·ªØ li·ªáu ·ªü c√°c trang tr∆∞·ªõc!")
    st.stop()

# L·∫•y d·ªØ li·ªáu v√† bi·∫øn ƒë·ªïi log difference
data = st.session_state['filtered_data']
df_log = np.log(data + 1)
df_log_diff = df_log.diff().dropna()

# Ph·∫ßn c√†i ƒë·∫∑t t·ª∑ l·ªá chia
st.header("1. Thi·∫øt l·∫≠p t·ª∑ l·ªá chia d·ªØ li·ªáu")

# Kh·ªüi t·∫°o gi√° tr·ªã trong session_state ch·ªâ khi ch∆∞a t·ªìn t·∫°i
if 'initialized' not in st.session_state:
    st.session_state['initialized'] = True
    st.session_state['train_ratio'] = 80  # T·ª∑ l·ªá t·∫≠p hu·∫•n luy·ªán
    st.session_state['valid_ratio'] = 20  # T·ª∑ l·ªá validation
    st.session_state['test_ratio'] = 0    # T·ª∑ l·ªá t·∫≠p ki·ªÉm tra (m·∫∑c ƒë·ªãnh l√† 0)

col1, col2, col3 = st.columns(3)
with col1:
    st.session_state['train_ratio'] = st.slider(
        "T·ª∑ l·ªá t·∫≠p hu·∫•n luy·ªán t·ªïng (%)", 
        min_value=60, 
        max_value=90, 
        value=st.session_state['train_ratio'],
        step=5
    )
with col2:
    st.session_state['valid_ratio'] = st.slider(
        "T·ª∑ l·ªá validation t·ª´ t·∫≠p hu·∫•n luy·ªán (%)", 
        min_value=10, 
        max_value=30, 
        value=st.session_state['valid_ratio'],
        step=5
    )
with col3:
    # T√≠nh to√°n t·ª∑ l·ªá test d·ª±a tr√™n t·ª∑ l·ªá train v√† valid
    st.session_state['test_ratio'] = 100 - st.session_state['train_ratio'] 
    st.metric("T·ª∑ l·ªá t·∫≠p ki·ªÉm tra (%)", st.session_state['test_ratio'])  # Hi·ªÉn th·ªã t·ª∑ l·ªá ki·ªÉm tra

# S·ª≠ d·ª•ng gi√° tr·ªã t·ª´ session_state
train_ratio = st.session_state['train_ratio']
valid_ratio = st.session_state['valid_ratio']
test_ratio = st.session_state['test_ratio']

# T√≠nh to√°n c√°c t·ª∑ l·ªá
TRAIN_RATIO = train_ratio / 100
VALID_RATIO = valid_ratio / 100
TEST_RATIO = test_ratio / 100

# Chia d·ªØ li·ªáu
total_samples = len(df_log_diff)
train_size = int(total_samples * TRAIN_RATIO)
test_size = total_samples - train_size

train_data_full = df_log_diff[:train_size]
test_data = df_log_diff[train_size:]

# Chia train_full th√†nh train v√† validation
valid_size = int(len(train_data_full) * VALID_RATIO)
train_data = train_data_full[:-valid_size]
valid_data = train_data_full[-valid_size:]

# Hi·ªÉn th·ªã th√¥ng tin v·ªÅ t·∫≠p d·ªØ li·ªáu
st.subheader("Th√¥ng tin v·ªÅ t·∫≠p d·ªØ li·ªáu")
col1, col2, col3 = st.columns(3)
with col1:
    st.metric("T·∫≠p hu·∫•n luy·ªán", 
              f"{len(train_data)} m·∫´u",
              f"{len(train_data)/total_samples*100:.1f}%")
with col2:
    st.metric("T·∫≠p validation", 
              f"{len(valid_data)} m·∫´u",
              f"{len(valid_data)/total_samples*100:.1f}%")
with col3:
    st.metric("T·∫≠p ki·ªÉm tra", 
              f"{len(test_data)} m·∫´u",
              f"{len(test_data)/total_samples*100:.1f}%")

# Hi·ªÉn th·ªã th√¥ng tin v·ªÅ th·ªùi gian
st.subheader("Kho·∫£ng th·ªùi gian c·ªßa c√°c t·∫≠p")
col1, col2 = st.columns(2)
with col1:
    st.write("**T·∫≠p hu·∫•n luy·ªán:**")
    st.write(f"- T·ª´: {train_data.index[0].strftime('%Y-%m-%d')}")
    st.write(f"- ƒê·∫øn: {train_data.index[-1].strftime('%Y-%m-%d')}")
    
    st.write("**T·∫≠p validation:**")
    st.write(f"- T·ª´: {valid_data.index[0].strftime('%Y-%m-%d')}")
    st.write(f"- ƒê·∫øn: {valid_data.index[-1].strftime('%Y-%m-%d')}")

with col2:
    st.write("**T·∫≠p ki·ªÉm tra:**")
    st.write(f"- T·ª´: {test_data.index[0].strftime('%Y-%m-%d')}")
    st.write(f"- ƒê·∫øn: {test_data.index[-1].strftime('%Y-%m-%d')}")

# V·∫Ω bi·ªÉu ƒë·ªì ph√¢n chia
st.subheader("Bi·ªÉu ƒë·ªì ph√¢n chia d·ªØ li·ªáu")
fig, ax = plt.subplots(figsize=(12, 6))

# V·∫Ω d·ªØ li·ªáu train
ax.plot(train_data.index, 
        train_data['Close'], 
        label='Train', 
        color='blue',
        alpha=0.7)

# V·∫Ω d·ªØ li·ªáu validation
ax.plot(valid_data.index, 
        valid_data['Close'], 
        label='Validation', 
        color='green',
        alpha=0.7)

# V·∫Ω d·ªØ li·ªáu test
ax.plot(test_data.index, 
        test_data['Close'], 
        label='Test', 
        color='red',
        alpha=0.7)

ax.set_title('Ph√¢n chia t·∫≠p d·ªØ li·ªáu (sau bi·∫øn ƒë·ªïi log difference)')
ax.set_xlabel('Th·ªùi gian')
ax.set_ylabel('Gi√° ƒë√≥ng c·ª≠a (Close)')
ax.legend()
ax.grid(True, alpha=0.3)
plt.xticks(rotation=45)
plt.tight_layout()

st.pyplot(fig)

# L∆∞u d·ªØ li·ªáu ƒë√£ chia v√†o session state
st.session_state['train_data'] = train_data
st.session_state['valid_data'] = valid_data
st.session_state['test_data'] = test_data
st.session_state['df_log_diff'] = df_log_diff