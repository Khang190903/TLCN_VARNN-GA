

import time  # Nh·∫≠p m√¥-ƒëun time
import streamlit as st
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from inspect import signature
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, LSTM
from sklearn.metrics import mean_squared_error, mean_absolute_error
import math

st.set_page_config(page_title="Hu·∫•n luy·ªán m√¥ h√¨nh VARNN", page_icon="ü§ñ")

# # Th√™m n√∫t reset n·∫øu mu·ªën hu·∫•n luy·ªán l·∫°i
# if st.button("Reset k·∫øt qu·∫£ hu·∫•n luy·ªán"):
#     for key in ['model_optimized_trained', 'model_default_trained', 
#                 'model_optimized', 'model_default',
#                 'history_optimized', 'history_default',
#                 'metrics_optimized', 'metrics_default']:
#         if key in st.session_state:
#             del st.session_state[key]
#     st.rerun()


# Thi·∫øt l·∫≠p background
page_bg_img = """
<style>
[data-testid="stAppViewContainer"] {
    background-image: url("");
    background-size: 100% 100%;
}
[data-testid="stHeader"]{
    background: rgba(0,0,0,0);
}
[data-testid="stToolbar"]{
    right:2rem;
}
[data-testid="stSidebar"] > div:first-child {
    background-image: url("https://drive.google.com/file/d/1HsEqY3G5e-jMDVjlxqD51DBHg-_vbD2I/view?usp=sharing");
    background-position: center;
}
</style>
"""
st.markdown(page_bg_img, unsafe_allow_html=True)

st.title("Hu·∫•n luy·ªán m√¥ h√¨nh VARNN")

# Ki·ªÉm tra d·ªØ li·ªáu
required_keys = ['X_train', 'y_train', 'X_valid', 'y_valid', 'X_test', 'y_test', 'best_params']
if not all(key in st.session_state for key in required_keys):
    st.warning("‚ö†Ô∏è Vui l√≤ng th·ª±c hi·ªán c√°c b∆∞·ªõc tr∆∞·ªõc ƒë√≥!")
    st.stop()

if 'model_default' not in st.session_state:
    st.session_state['model_default'] = None  # Ho·∫∑c kh·ªüi t·∫°o v·ªõi gi√° tr·ªã m·∫∑c ƒë·ªãnh kh√°c n·∫øu c·∫ßn
# 1. Hu·∫•n luy·ªán m√¥ h√¨nh v·ªõi tham s·ªë t·ªëi ∆∞u t·ª´ GA
st.header("1. M√¥ h√¨nh VARNN v·ªõi tham s·ªë t·ªëi ∆∞u t·ª´ GA")
# Hi·ªÉn th·ªã tham s·ªë t·ªëi ∆∞u
st.subheader("1.1. Tham s·ªë t·ªëi ∆∞u t·ª´ GA")
col1, col2, col3 = st.columns(3)
with col1:
    st.metric("Epochs", st.session_state['best_params']['epochs'])
with col2:
    st.metric("Batch Size", st.session_state['best_params']['batch_size'])
with col3:
    st.metric("Neurons", st.session_state['best_params']['n_neurons'])
# K·∫øt h·ª£p t·∫≠p train v√† validation
X_final_train = np.concatenate((st.session_state['X_train'], st.session_state['X_valid']), axis=0)
y_final_train = np.concatenate((st.session_state['y_train'], st.session_state['y_valid']), axis=0)
# Ki·ªÉm tra xem ƒë√£ hu·∫•n luy·ªán m√¥ h√¨nh t·ªëi ∆∞u ch∆∞a
if 'model_optimized_trained' not in st.session_state:
    st.session_state['model_optimized_trained'] = False
if st.button("Hu·∫•n luy·ªán m√¥ h√¨nh VARNN v·ªõi tham s·ªë t·ªëi ∆∞u") or st.session_state['model_optimized_trained']:
    if not st.session_state['model_optimized_trained']:
        with st.spinner("ƒêang hu·∫•n luy·ªán m√¥ h√¨nh..."):
            start_time = time.time()  # Th·ªùi gian b·∫Øt ƒë·∫ßu hu·∫•n luy·ªán
            # X√¢y d·ª±ng v√† hu·∫•n luy·ªán m√¥ h√¨nh LSTM t·ªëi ∆∞u
            model_optimized = Sequential()
            model_optimized.add(LSTM(st.session_state['best_params']['n_neurons'], 
                                    input_shape=(X_final_train.shape[1], X_final_train.shape[2]), 
                                    activation='relu'))
            model_optimized.add(Dense(4))
            model_optimized.compile(loss='mean_squared_error', optimizer='adam')
                # Hu·∫•n luy·ªán m√¥ h√¨nh
            history_optimized = model_optimized.fit(
                X_final_train, y_final_train,
                epochs=st.session_state['best_params']['epochs'],
                batch_size=st.session_state['best_params']['batch_size'],
                verbose=0
            )

            end_time = time.time()  # Th·ªùi gian k·∫øt th√∫c hu·∫•n luy·ªán
            training_time = end_time - start_time  # Th·ªùi gian hu·∫•n luy·ªán

            # L∆∞u th·ªùi gian v√†o session state
            st.session_state['training_time'] = training_time

            # D·ª± ƒëo√°n tr√™n t·∫≠p train
            predictions_train = model_optimized.predict(X_final_train)
            
            # T√≠nh c√°c metrics tr√™n t·∫≠p train
            mse_train = mean_squared_error(y_final_train, predictions_train)
            rmse_train = math.sqrt(mse_train)
            mae_train = mean_absolute_error(y_final_train, predictions_train)
            cv_rmse_train = (rmse_train / np.mean(y_final_train)) * 100
            # D·ª± ƒëo√°n tr√™n t·∫≠p test
            predictions_optimized = model_optimized.predict(st.session_state['X_test'])
            
            # Chuy·ªÉn ƒë·ªïi ng∆∞·ª£c v·ªÅ d·∫°ng g·ªëc
            y_test_original = np.exp(np.cumsum(st.session_state['y_test'], axis=0)) - 1
            predictions_original = np.exp(np.cumsum(predictions_optimized, axis=0)) - 1
            
            # T√≠nh c√°c metrics tr√™n d·ªØ li·ªáu g·ªëc
            mse_optimized = mean_squared_error(y_test_original, predictions_original)
            rmse_optimized = math.sqrt(mse_optimized)
            mae_optimized = mean_absolute_error(y_test_original, predictions_original)
            cv_rmse_optimized = (rmse_optimized / np.mean(y_test_original)) * 100
            
            # In ra c√°c gi√° tr·ªã ƒë·ªÉ ki·ªÉm tra
            st.write(f"Gi√° tr·ªã trung b√¨nh c·ªßa y_test_original: {np.mean(y_test_original)}")
            st.write(f"RMSE: {rmse_optimized}")
            
            
            # ƒê·∫£m b·∫£o trung b√¨nh c·ªßa y_test_original kh√¥ng b·∫±ng 0 ƒë·ªÉ tr√°nh chia cho 0
            mean_y_test_original = np.mean(y_test_original)
            if mean_y_test_original != 0:
                cv_rmse_optimized = (rmse_optimized / mean_y_test_original) * 100
            else:
                cv_rmse_optimized = float('inf')  # G√°n v√¥ c·ª±c n·∫øu trung b√¨nh b·∫±ng 0

            # L∆∞u k·∫øt qu·∫£ v√†o session state
            st.session_state['metrics_optimized'] = {
                'mse': mse_optimized,  # Th√™m MSE v√†o session state
                'rmse': rmse_optimized,
                'mae': mae_optimized,
                'cv_rmse': cv_rmse_optimized
            }

            st.session_state['model_optimized'] = model_optimized
            st.session_state['history_optimized'] = history_optimized.history
            st.session_state['model_optimized_trained'] = True

            # Hi·ªÉn th·ªã th·ªùi gian hu·∫•n luy·ªán  tr√™n t·∫≠p train
            st.success(f"Th·ªùi gian hu·∫•n luy·ªán: {training_time:.4f} gi√¢y")
            st.metric("Train MSE", f"{mse_train:.6f}")
            st.metric("Train RMSE", f"{rmse_train:.6f}")
            st.metric("Train MAE", f"{mae_train:.6f}")
            st.metric("Train CV(RMSE) %", f"{cv_rmse_train:.2f}")

            # # Hi·ªÉn th·ªã metrics tr√™n t·∫≠p test
            # st.metric("Test MSE", f"{mse_optimized:.6f}")
            # st.metric("Test RMSE", f"{rmse_optimized:.6f}")
            # st.metric("Test MAE", f"{mae_optimized:.6f}")
            # st.metric("Test CV(RMSE) %", f"{cv_rmse_optimized:.2f}")
# # Kh·ªüi t·∫°o c√°c kh√≥a trong session_state n·∫øu ch∆∞a t·ªìn t·∫°i
# if 'training_time' not in st.session_state:
#     st.session_state['training_time'] = 0.0
        # Hi·ªÉn th·ªã metrics
if 'metrics_optimized' in st.session_state:
    st.subheader("1.2. K·∫øt qu·∫£ ƒë√°nh gi√° m√¥ h√¨nh t·ªëi ∆∞u")
    col1, col2, col3, col4 = st.columns(4)  # Th√™m c·ªôt cho MSE
    with col1:
        st.metric("MSE", f"{st.session_state['metrics_optimized']['mse']:.6f}")  # Hi·ªÉn th·ªã MSE
    with col2:
        st.metric("RMSE", f"{st.session_state['metrics_optimized']['rmse']:.6f}")
    with col3:
        st.metric("MAE", f"{st.session_state['metrics_optimized']['mae']:.6f}")
    with col4:
        st.metric("CV(RMSE) %", f"{st.session_state['metrics_optimized']['cv_rmse']:.2f}")

    st.metric("Th·ªùi gian hu·∫•n luy·ªán", f"{st.session_state.get('training_time', 0):.4f} gi√¢y") 

        # V·∫Ω bi·ªÉu ƒë·ªì loss
    st.subheader("1.3. Bi·ªÉu ƒë·ªì Loss trong qu√° tr√¨nh hu·∫•n luy·ªán")
    fig, ax = plt.subplots(figsize=(10, 6))
    ax.plot(st.session_state['history_optimized']['loss'])
    ax.set_title('Model Loss')
    ax.set_xlabel('Epoch')
    ax.set_ylabel('Loss')
    ax.grid(True)
    st.pyplot(fig)
# 2. Hu·∫•n luy·ªán m√¥ h√¨nh v·ªõi tham s·ªë m·∫∑c ƒë·ªãnh
st.header("2. M√¥ h√¨nh VARNN v·ªõi tham s·ªë m·∫∑c ƒë·ªãnh")


#Hi·ªÉn th·ªã tham s·ªë m·∫∑c ƒë·ªãnh
st.subheader("2.1. Tham s·ªë m·∫∑c ƒë·ªãnh")
col1, col2, col3 = st.columns(3)
with col1:
    st.metric("Epochs", 200)
with col2:
    st.metric("Batch Size", 32)
with col3:
    st.metric("Neurons", 50)
# Ki·ªÉm tra xem ƒë√£ hu·∫•n luy·ªán m√¥ h√¨nh m·∫∑c ƒë·ªãnh ch∆∞a
if 'model_default_trained' not in st.session_state:
    st.session_state['model_default_trained'] = False
if st.button("Hu·∫•n luy·ªán m√¥ h√¨nh VARNN v·ªõi tham s·ªë m·∫∑c ƒë·ªãnh") or st.session_state['model_default_trained']:
    if not st.session_state['model_default_trained']:
        with st.spinner("ƒêang hu·∫•n luy·ªán m√¥ h√¨nh m·∫∑c ƒë·ªãnh..."):
            start_time = time.time()  # Th·ªùi gian b·∫Øt ƒë·∫ßu hu·∫•n luy·ªán
            # X√¢y d·ª±ng m√¥ h√¨nh LSTM m·∫∑c ƒë·ªãnh
            model_default = Sequential()
            model_default.add(LSTM(50, input_shape=(X_final_train.shape[1], X_final_train.shape[2]), 
                                activation='relu'))
            model_default.add(Dense(4))
            model_default.compile(loss='mean_squared_error', optimizer='adam')
                # Hu·∫•n luy·ªán m√¥ h√¨nh
            history_default = model_default.fit(
                X_final_train, y_final_train,
                epochs=200,
                batch_size=32,
                verbose=0
            )

            end_time = time.time()  # Th·ªùi gian k·∫øt th√∫c hu·∫•n luy·ªán
            training_time_default = end_time - start_time  # Th·ªùi gian hu·∫•n luy·ªán

            # L∆∞u th·ªùi gian v√†o session state
            st.session_state['training_time_default'] = training_time_default

            # D·ª± ƒëo√°n tr√™n t·∫≠p train
            predictions_train = model_default.predict(X_final_train)
            
            # T√≠nh c√°c metrics tr√™n t·∫≠p train
            mse_train = mean_squared_error(y_final_train, predictions_train)
            rmse_train = math.sqrt(mse_train)
            mae_train = mean_absolute_error(y_final_train, predictions_train)
            cv_rmse_train = (rmse_train / np.mean(y_final_train)) * 100


            # D·ª± ƒëo√°n tr√™n t·∫≠p test
            predictions_default = model_default.predict(st.session_state['X_test'])
            
            # Chuy·ªÉn ƒë·ªïi ng∆∞·ª£c v·ªÅ d·∫°ng g·ªëc
            y_test_original = np.exp(np.cumsum(st.session_state['y_test'], axis=0)) - 1
            predictions_original = np.exp(np.cumsum(predictions_default, axis=0)) - 1
            
            # T√≠nh c√°c metrics tr√™n d·ªØ li·ªáu g·ªëc
            mse_default = mean_squared_error(y_test_original, predictions_original)
            rmse_default = math.sqrt(mse_default)
            mae_default = mean_absolute_error(y_test_original, predictions_original)
            cv_rmse_default = (rmse_default / np.mean(y_test_original)) * 100

            # In ra c√°c gi√° tr·ªã ƒë·ªÉ ki·ªÉm tra
            st.write(f"Gi√° tr·ªã trung b√¨nh c·ªßa y_test_original: {np.mean(y_test_original)}")
            st.write(f"RMSE: {rmse_default}")
            
            # ƒê·∫£m b·∫£o trung b√¨nh c·ªßa y_test_original kh√¥ng b·∫±ng 0 ƒë·ªÉ tr√°nh chia cho 0
            mean_y_test_original = np.mean(y_test_original)
            if mean_y_test_original != 0:
                cv_rmse_default = (rmse_default / mean_y_test_original) * 100
            else:
                cv_rmse_default = float('inf')  # G√°n v√¥ c·ª±c n·∫øu trung b√¨nh b·∫±ng 0

            # L∆∞u k·∫øt qu·∫£ v√†o session state
            st.session_state['metrics_default'] = {
                'mse': mse_default,  # Th√™m MSE v√†o session state
                'rmse': rmse_default,
                'mae': mae_default,
                'cv_rmse': cv_rmse_default
            }

            st.session_state['model_default'] = model_default
            st.session_state['history_default'] = history_default.history  # L∆∞u history
            st.session_state['model_default_trained'] = True

            # Hi·ªÉn th·ªã th·ªùi gian hu·∫•n luy·ªán  tr√™n t·∫≠p train
            st.success(f"Th·ªùi gian hu·∫•n luy·ªán: {training_time_default:.4f} gi√¢y")
            st.metric("Train MSE", f"{mse_train:.6f}")
            st.metric("Train RMSE", f"{rmse_train:.6f}")
            st.metric("Train MAE", f"{mae_train:.6f}")
            st.metric("Train CV(RMSE) %", f"{cv_rmse_train:.2f}")

            # # Hi·ªÉn th·ªã th·ªùi gian hu·∫•n luy·ªán v√† metrics
            # st.success(f"Th·ªùi gian hu·∫•n luy·ªán: {training_time:.4f} gi√¢y")
            # st.metric("MSE", f"{mse_default:.6f}")
            # st.metric("RMSE", f"{rmse_default:.6f}")
            # st.metric("MAE", f"{mae_default:.6f}")
            # st.metric("CV(RMSE) %", f"{cv_rmse_default:.2f}")

# if 'training_time_default' not in st.session_state:
#     st.session_state['training_time_default'] = 0.0

if 'metrics_default' in st.session_state:
    # Hi·ªÉn th·ªã metrics
    st.subheader("2.2. K·∫øt qu·∫£ ƒë√°nh gi√° m√¥ h√¨nh m·∫∑c ƒë·ªãnh")
    col1, col2, col3, col4 = st.columns(4)  # Th√™m c·ªôt cho MSE
    with col1:
        st.metric("MSE", f"{st.session_state['metrics_default']['mse']:.6f}")  # Hi·ªÉn th·ªã MSE
    with col2:
        st.metric("RMSE", f"{st.session_state['metrics_default']['rmse']:.6f}")
    with col3:
        st.metric("MAE", f"{st.session_state['metrics_default']['mae']:.6f}")
    with col4:
        st.metric("CV(RMSE) %", f"{st.session_state['metrics_default']['cv_rmse']:.2f}")

    st.metric("Th·ªùi gian hu·∫•n luy·ªán", f"{st.session_state['training_time_default']:.4f} gi√¢y")
    # V·∫Ω bi·ªÉu ƒë·ªì loss
    st.subheader("2.2. Bi·ªÉu ƒë·ªì Loss trong qu√° tr√¨nh hu·∫•n luy·ªán")
    fig, ax = plt.subplots(figsize=(10, 6))
    ax.plot(st.session_state['history_default']['loss'])
    ax.set_title('Model Loss')
    ax.set_xlabel('Epoch')
    ax.set_ylabel('Loss')
    ax.grid(True)
    st.pyplot(fig)


# Th√™m n√∫t reset n·∫øu mu·ªën hu·∫•n luy·ªán l·∫°i
if st.button("Reset k·∫øt qu·∫£ hu·∫•n luy·ªán"):
    for key in ['model_optimized_trained', 'model_default_trained', 
                'model_optimized', 'model_default',
                'history_optimized', 'history_default',
                'metrics_optimized', 'metrics_default']:
        if key in st.session_state:
            del st.session_state[key]
    st.rerun()


# 3. So s√°nh hai m√¥ h√¨nh
if 'metrics_optimized' in st.session_state and 'metrics_default' in st.session_state:
    

    st.header("3. ƒê√°nh gi√° gi·ªØa VAR_LSTM_GA v√† VAR_LSTM")

        # 1. T√≠nh th·ªùi gian d·ª± ƒëo√°n cho model_default (VAR_LSTM)
    start_time_default = time.time()  # Th·ªùi gian b·∫Øt ƒë·∫ßu
    test_predict_default = st.session_state['model_default'].predict(st.session_state['X_test'])
    end_time_default = time.time()  # Th·ªùi gian k·∫øt th√∫c

    # T√≠nh th·ªùi gian ki·ªÉm tra
    test_time_default = end_time_default - start_time_default

    # 2. T√≠nh th·ªùi gian d·ª± ƒëo√°n cho model_optimized (VAR_LSTM_GA)
    start_time_ga = time.time()  # Th·ªùi gian b·∫Øt ƒë·∫ßu
    test_predict_ga = st.session_state['model_optimized'].predict(st.session_state['X_test'])
    end_time_ga = time.time()  # Th·ªùi gian k·∫øt th√∫c

    # T√≠nh th·ªùi gian ki·ªÉm tra
    test_time_ga = end_time_ga - start_time_ga

    # Hi·ªÉn th·ªã k·∫øt qu·∫£
    st.subheader("3.1 Th·ªùi gian ki·ªÉm tra")
    st.write(f"Th·ªùi gian ki·ªÉm tra cho VAR_LSTM: {test_time_default:.4f} gi√¢y")
    st.write(f"Th·ªùi gian ki·ªÉm tra cho VAR_LSTM_GA: {test_time_ga:.4f} gi√¢y")



    st.subheader("3.2 B·∫£ng so s√°nh ch·ªâ s·ªë")
    comparison_data = pd.DataFrame({
        'Metric': ['MSE', 'RMSE', 'MAE', 'CV(RMSE) %'],
        'VARNN t·ªëi ∆∞u': [
            st.session_state['metrics_optimized']['mse'],
            st.session_state['metrics_optimized']['rmse'],
            st.session_state['metrics_optimized']['mae'],
            st.session_state['metrics_optimized']['cv_rmse']
        ],
        'VARNN m·∫∑c ƒë·ªãnh': [
            st.session_state['metrics_default']['mse'],
            st.session_state['metrics_default']['rmse'],
            st.session_state['metrics_default']['mae'],
            st.session_state['metrics_default']['cv_rmse']
        ]
    })
    
    st.dataframe(comparison_data.style.format({
        'VARNN t·ªëi ∆∞u': '{:.6f}',
        'VARNN m·∫∑c ƒë·ªãnh': '{:.6f}'
    }))


# 2. K·∫øt lu·∫≠n so s√°nh
st.subheader("3.3. K·∫øt lu·∫≠n so s√°nh")

# Ki·ªÉm tra xem metrics_default c√≥ t·ªìn t·∫°i kh√¥ng tr∆∞·ªõc khi t√≠nh to√°n s·ª± kh√°c bi·ªát
if 'metrics_optimized' in st.session_state and 'metrics_default' in st.session_state:
    # T√≠nh s·ª± kh√°c bi·ªát gi·ªØa c√°c metrics
    metrics_diff = {
        'RMSE': st.session_state['metrics_optimized']['rmse'] - st.session_state['metrics_default']['rmse'],
        'MSE': st.session_state['metrics_optimized']['mse'] - st.session_state['metrics_default']['mse'],
        'MAE': st.session_state['metrics_optimized']['mae'] - st.session_state['metrics_default']['mae'],
        'CV(RMSE)': st.session_state['metrics_optimized']['cv_rmse'] - st.session_state['metrics_default']['cv_rmse']  # Th√™m CV(RMSE) difference
    }

    # Hi·ªÉn th·ªã s·ª± kh√°c bi·ªát
    col1, col2, col3, col4 = st.columns(4)  # Th√™m c·ªôt cho CV(RMSE) Difference
    with col1:
        st.metric("RMSE Difference", f"{metrics_diff['RMSE']:.6f}")
    with col2:
        st.metric("MSE Difference", f"{metrics_diff['MSE']:.6f}")
    with col3:
        st.metric("MAE Difference", f"{metrics_diff['MAE']:.6f}")
    with col4:
        st.metric("CV(RMSE) Difference", f"{metrics_diff['CV(RMSE)']:.6f}")  

    # ƒê∆∞a ra k·∫øt lu·∫≠n
    if all(diff < 0 for diff in metrics_diff.values()):
        st.success("‚úÖ M√¥ h√¨nh VAR k·∫øt h·ª£p LSTM v·ªõi tham s·ªë t·ªëi ∆∞u t·ª´ GA cho k·∫øt qu·∫£ t·ªët h∆°n so v·ªõi VAR k·∫øt h·ª£p LSTM m·∫∑c ƒë·ªãnh.")
    elif all(diff > 0 for diff in metrics_diff.values()):
        st.error("‚ùå M√¥ h√¨nh VAR k·∫øt h·ª£p LSTM v·ªõi tham s·ªë t·ªëi ∆∞u t·ª´ GA cho k·∫øt qu·∫£ k√©m h∆°n m√¥ h√¨nh VAR k·∫øt h·ª£p LSTM m·∫∑c ƒë·ªãnh.")
    else:
        st.info("‚ÑπÔ∏è M√¥ h√¨nh VAR k·∫øt h·ª£p LSTM v·ªõi tham s·ªë t·ªëi ∆∞u t·ª´ GA c√≥ s·ª± c·∫£i thi·ªán ·ªü m·ªôt s·ªë ch·ªâ s·ªë nh∆∞ng kh√¥ng ho√†n to√†n v∆∞·ª£t tr·ªôi so v·ªõi m√¥ h√¨nh LSTM m·∫∑c ƒë·ªãnh.")
else:
    st.warning("‚ö†Ô∏è Vui l√≤ng hu·∫•n luy·ªán c·∫£ hai m√¥ h√¨nh tr∆∞·ªõc khi so s√°nh.")
