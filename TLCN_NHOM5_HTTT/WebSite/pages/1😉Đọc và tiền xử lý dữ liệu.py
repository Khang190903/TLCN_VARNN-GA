import streamlit as st
import numpy as np
import cv2 as cv
import joblib
from PIL import Image
import time
import random
import math
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
st.set_page_config(
    page_title="ƒê·ªçc v√† ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu",
    page_icon="üåê",
)

if 'uploaded_file' not in st.session_state:
    st.session_state['uploaded_file'] = None
if 'full_data' not in st.session_state:
    st.session_state['full_data'] = None
if 'filtered_data' not in st.session_state:
    st.session_state['filtered_data'] = None
if 'normalization_option' not in st.session_state:
    st.session_state['normalization_option'] = "Kh√¥ng chu·∫©n h√≥a"  # Gi√° tr·ªã m·∫∑c ƒë·ªãnh

page_bg_img = """
<style>
[data-testid="stAppViewContainer"] {
    background-image: url("");
    background-size: 100% 100%;
}
[data-testid="stHeader"]{
    background: rgba(0,0,0,0);
}
[data-testid="stToolbar"]{
    right:2rem;
}
[data-testid="stSidebar"] > div:first-child {
    background-image: url("https://drive.google.com/file/d/1HsEqY3G5e-jMDVjlxqD51DBHg-_vbD2I/view?usp=sharing");
    background-position: center;
}
</style>
"""
st.markdown(page_bg_img,unsafe_allow_html=True)

st.title("ƒê·ªçc v√† ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu")

uploaded_file = st.file_uploader("Ch·ªçn file CSV ch·ª©a d·ªØ li·ªáu ", type=['csv'])


if uploaded_file is not None:
    if st.session_state['uploaded_file'] != uploaded_file:
        st.session_state['uploaded_file'] = uploaded_file
        try:
            maindf = pd.read_csv(uploaded_file, parse_dates=['Date'], index_col='Date')
            st.session_state['full_data'] = maindf
        except Exception as e:
            st.error(f"C√≥ l·ªói khi ƒë·ªçc d·ªØ li·ªáu: {str(e)}")

# ƒê·ªçc v√† ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu
st.header("1. ƒê·ªçc v√† ki·ªÉm tra d·ªØ li·ªáu")

try:
    if st.session_state['full_data'] is not None:
        maindf = st.session_state['full_data']
        
        # 2.1 Th√¥ng tin c∆° b·∫£n
        st.markdown("#### 2.1. Th√¥ng tin c∆° b·∫£n v·ªÅ dataset")
        col1, col2 = st.columns(2)
        with col1:
            st.write(f"- S·ªë ng√†y trong dataset: {maindf.shape[0]}")
            st.write(f"- S·ªë tr∆∞·ªùng d·ªØ li·ªáu: {maindf.shape[1]}")
        with col2:
            st.write(f"- Ng√†y b·∫Øt ƒë·∫ßu: {maindf.index.min().strftime('%Y-%m-%d')}")
            st.write(f"- Ng√†y k·∫øt th√∫c: {maindf.index.max().strftime('%Y-%m-%d')}")

        # 2.2 D·ªØ li·ªáu m·∫´u v√† bi·ªÉu ƒë·ªì gi√°
        st.markdown("#### 2.2. D·ªØ li·ªáu m·∫´u v√† bi·ªÉu ƒë·ªì gi√°")
        show_sample = st.checkbox("Xem d·ªØ li·ªáu m·∫´u")
        if show_sample:
            st.dataframe(maindf.head())
        
        # Ch·ªçn c·ªôt ƒë·ªÉ hi·ªÉn th·ªã
        selected_column = st.selectbox(
            "Ch·ªçn c·ªôt ƒë·ªÉ hi·ªÉn th·ªã:",
            ['Open', 'High', 'Low', 'Close', 'T·∫•t c·∫£']
        )

        # Th√™m radio button ƒë·ªÉ ch·ªçn gi·ªØa v·∫Ω bi·ªÉu ƒë·ªì ho·∫∑c xem s·ªë li·ªáu
        view_data_or_chart = st.radio("Ch·ªçn hi·ªÉn th·ªã cho c·ªôt ƒë√£ ch·ªçn:", ("V·∫Ω bi·ªÉu ƒë·ªì", "Xem s·ªë li·ªáu"))

        if view_data_or_chart == "V·∫Ω bi·ªÉu ƒë·ªì":
            # V·∫Ω bi·ªÉu ƒë·ªì cho t·ª´ng c·ªôt ri√™ng bi·ªát
            if selected_column == 'T·∫•t c·∫£':  # N·∫øu ch·ªçn 'T·∫•t c·∫£', v·∫Ω t·∫•t c·∫£ c√°c c·ªôt
                for col in ['Open', 'High', 'Low', 'Close']:
                    fig, ax = plt.subplots(figsize=(15, 5))
                    ax.plot(maindf.index, maindf[col], linewidth=2, label=col)
                    ax.set_title(f'Historical {col} Price Chart', pad=10)
                    ax.set_xlabel('Date', fontsize=12)  # Ch√∫ th√≠ch cho tr·ª•c x
                    ax.set_ylabel(f'{col} Price', fontsize=12)  # Ch√∫ th√≠ch cho tr·ª•c y
                    ax.grid(True, linestyle='--', alpha=0.7)
                    ax.tick_params(axis='x', rotation=45)
                    ax.legend()  # Hi·ªÉn th·ªã ch√∫ th√≠ch cho ƒë∆∞·ªùng bi·ªÉu ƒë·ªì
                    plt.tight_layout()
                    st.pyplot(fig)
            else:
                fig, ax = plt.subplots(figsize=(15, 5))
                ax.plot(maindf.index, maindf[selected_column], linewidth=2, label=selected_column)
                ax.set_title(f'Historical {selected_column} Price Chart', pad=10)
                ax.set_xlabel('Date', fontsize=12)  # Ch√∫ th√≠ch cho tr·ª•c x
                ax.set_ylabel(f'{selected_column} Price', fontsize=12)  # Ch√∫ th√≠ch cho tr·ª•c y
                ax.grid(True, linestyle='--', alpha=0.7)
                ax.tick_params(axis='x', rotation=45)
                ax.legend()  # Hi·ªÉn th·ªã ch√∫ th√≠ch cho ƒë∆∞·ªùng bi·ªÉu ƒë·ªì
                plt.tight_layout()
                st.pyplot(fig)

            # # Hi·ªÉn th·ªã b·∫£ng d·ªØ li·ªáu cho c·ªôt ƒë∆∞·ª£c ch·ªçn
            # st.markdown(f"#### D·ªØ li·ªáu cho c·ªôt {selected_column} c√πng v·ªõi Date")
            # st.dataframe(maindf[[selected_column]].reset_index())

        elif view_data_or_chart == "Xem s·ªë li·ªáu":
            # Hi·ªÉn th·ªã s·ªë li·ªáu cho t·ª´ng c·ªôt ri√™ng bi·ªát
            if selected_column == 'T·∫•t c·∫£':
                for col in ['Open', 'High', 'Low', 'Close']:
                    st.markdown(f"#### D·ªØ li·ªáu cho c·ªôt {col} c√πng v·ªõi Date")
                    st.dataframe(maindf[[col]].reset_index())
            else:
                st.markdown(f"#### D·ªØ li·ªáu cho c·ªôt {selected_column} c√πng v·ªõi Date")
                st.dataframe(maindf[[selected_column]].reset_index())

        elif view_data_or_chart == "Xem s·ªë li·ªáu":
            selected_column = st.selectbox(
                "Ch·ªçn c·ªôt ƒë·ªÉ xem s·ªë li·ªáu:",
                ['Open', 'High', 'Low', 'Close']
            )
            st.markdown(f"#### D·ªØ li·ªáu cho c·ªôt {selected_column} c√πng v·ªõi Date")
            st.dataframe(maindf[[selected_column]].reset_index())

        # 2.3 Th·ªëng k√™ m√¥ t·∫£
        st.markdown("#### 2.3. Th·ªëng k√™ m√¥ t·∫£")
        if st.checkbox("Xem th·ªëng k√™ c∆° b·∫£n"):
            st.write(maindf.describe())

        # ƒê·ªãnh nghƒ©a c√°c h√†m chu·∫©n h√≥a
        def min_max_normalize(df):
            """Chu·∫©n h√≥a DataFrame b·∫±ng ph∆∞∆°ng ph√°p chu·∫©n h√≥a Min-Max."""
            return (df - df.min()) / (df.max() - df.min())

        def z_score_normalize(df):
            """Chu·∫©n h√≥a DataFrame b·∫±ng ph∆∞∆°ng ph√°p chu·∫©n h√≥a Z-score."""
            return (df - df.mean()) / df.std()

        # Th√™m t√πy ch·ªçn chu·∫©n h√≥a
        st.header("Ch·ªçn ph∆∞∆°ng ph√°p chu·∫©n h√≥a d·ªØ li·ªáu")
        st.session_state['normalization_option'] = st.selectbox(
            "Ch·ªçn ph∆∞∆°ng ph√°p chu·∫©n h√≥a:",
            options=["Kh√¥ng chu·∫©n h√≥a", "Chu·∫©n h√≥a Min-Max", "Chu·∫©n h√≥a Z-score"],
            index=["Kh√¥ng chu·∫©n h√≥a", "Chu·∫©n h√≥a Min-Max", "Chu·∫©n h√≥a Z-score"].index(st.session_state['normalization_option'])  # Gi·ªØ nguy√™n gi√° tr·ªã ƒë√£ ch·ªçn
        )

        # L∆∞u d·ªØ li·ªáu g·ªëc ƒë·ªÉ v·∫Ω bi·ªÉu ƒë·ªì sau khi chu·∫©n h√≥a
        original_data = maindf.copy()

        # Ki·ªÉm tra xem d·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c chu·∫©n h√≥a ch∆∞a
        if 'normalized_data' not in st.session_state:
            st.session_state['normalized_data'] = maindf.copy()  # L∆∞u d·ªØ li·ªáu g·ªëc


        # √Åp d·ª•ng chu·∫©n h√≥a d·ª±a tr√™n l·ª±a ch·ªçn c·ªßa ng∆∞·ªùi d√πng
        if st.session_state['normalization_option'] == "Chu·∫©n h√≥a Min-Max":
            st.session_state['normalized_data'] = min_max_normalize(maindf)
            st.success("D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c chu·∫©n h√≥a b·∫±ng ph∆∞∆°ng ph√°p Min-Max.")
        elif st.session_state['normalization_option'] == "Chu·∫©n h√≥a Z-score":
            st.session_state['normalized_data'] = z_score_normalize(maindf)
            st.success("D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c chu·∫©n h√≥a b·∫±ng ph∆∞∆°ng ph√°p Z-score.")
        else:
            st.session_state['normalized_data'] = maindf.copy()  # Kh√¥ng chu·∫©n h√≥a
            st.success("D·ªØ li·ªáu kh√¥ng ƒë∆∞·ª£c chu·∫©n h√≥a.")
            
        # L∆∞u d·ªØ li·ªáu ƒë√£ chu·∫©n h√≥a v√†o session state
        st.session_state['full_data'] = st.session_state['normalized_data']
        
         # V·∫Ω bi·ªÉu ƒë·ªì tr∆∞·ªõc v√† sau khi chu·∫©n h√≥a
        if st.session_state['normalization_option'] != "Kh√¥ng chu·∫©n h√≥a":
            st.subheader("Bi·ªÉu ƒë·ªì tr∆∞·ªõc v√† sau khi chu·∫©n h√≥a")
            fig, ax = plt.subplots(2, 1, figsize=(15, 10))

            # Bi·ªÉu ƒë·ªì d·ªØ li·ªáu g·ªëc
            ax[0].plot(original_data.index, original_data['Open'], label='Open', color='blue')
            ax[0].plot(original_data.index, original_data['High'], label='High', color='orange')
            ax[0].plot(original_data.index, original_data['Low'], label='Low', color='green')
            ax[0].plot(original_data.index, original_data['Close'], label='Close', color='red')
            ax[0].set_title('D·ªØ li·ªáu g·ªëc', pad=10)
            ax[0].set_xlabel('Date')
            ax[0].set_ylabel('Gi√°')
            ax[0].legend()
            ax[0].grid(True)

            # Bi·ªÉu ƒë·ªì d·ªØ li·ªáu ƒë√£ chu·∫©n h√≥a
            ax[1].plot(st.session_state['normalized_data'].index, st.session_state['normalized_data']['Open'], label='Open', color='blue')
            ax[1].plot(st.session_state['normalized_data'].index, st.session_state['normalized_data']['High'], label='High', color='orange')
            ax[1].plot(st.session_state['normalized_data'].index, st.session_state['normalized_data']['Low'], label='Low', color='green')
            ax[1].plot(st.session_state['normalized_data'].index, st.session_state['normalized_data']['Close'], label='Close', color='red')
            ax[1].set_title('D·ªØ li·ªáu ƒë√£ chu·∫©n h√≥a', pad=10)
            ax[1].set_xlabel('Date')
            ax[1].set_ylabel('Gi√° (ƒë√£ chu·∫©n h√≥a)')
            ax[1].legend()
            ax[1].grid(True)

            plt.tight_layout()
            st.pyplot(fig)

         # 2.4 Ki·ªÉm tra v√† x·ª≠ l√Ω d·ªØ li·ªáu thi·∫øu
        st.markdown("#### 2.4. Ki·ªÉm tra v√† x·ª≠ l√Ω d·ªØ li·ªáu thi·∫øu")
        missing_values = maindf.isnull().sum()

        if missing_values.sum() > 0:
            st.write("S·ªë l∆∞·ª£ng gi√° tr·ªã thi·∫øu trong t·ª´ng tr∆∞·ªùng:")
            st.write(missing_values)
            
            if st.checkbox("X·ª≠ l√Ω d·ªØ li·ªáu thi·∫øu"):
                method = st.selectbox(
                    "Ch·ªçn ph∆∞∆°ng ph√°p x·ª≠ l√Ω:",
                    ["Gi√° tr·ªã trung b√¨nh", "X√≥a d√≤ng", "Gi√° tr·ªã trung b√¨nh c·ªßa 5 gi√° tr·ªã g·∫ßn nh·∫•t"]
                )
                
                if st.button("√Åp d·ª•ng x·ª≠ l√Ω"):
                    if method == "Gi√° tr·ªã trung b√¨nh c·ªßa c·ªôt":
                        maindf = maindf.fillna(maindf.mean())
                    elif method == "Gi√° tr·ªã trung b√¨nh c·ªßa 5 gi√° tr·ªã g·∫ßn nh·∫•t":
                        maindf = maindf.fillna(maindf.rolling(window=5, center=True, min_periods=1).mean())
                    else:  # X√≥a d√≤ng
                        maindf = maindf.dropna()
                    
                    # L·∫•y 365 ng√†y g·∫ßn nh·∫•t sau khi x·ª≠ l√Ω
                    maindf = maindf.tail(365)
                    st.write(f"ƒê√£ l·ªçc l·∫°i c√≤n {len(maindf)} m·∫´u d·ªØ li·ªáu g·∫ßn nh·∫•t ƒë·ªÉ th·ª±c hi·ªán ti·∫øp")

                    missing_values_after = maindf.isnull().sum()
                    if missing_values_after.sum() == 0:
                        st.success("‚úÖ ƒê√£ x·ª≠ l√Ω xong t·∫•t c·∫£ gi√° tr·ªã thi·∫øu")
                    else:
                        st.write("S·ªë l∆∞·ª£ng gi√° tr·ªã thi·∫øu sau khi x·ª≠ l√Ω:")
                        st.write(missing_values_after)
        else:
            st.success("‚úÖ Dataset kh√¥ng c√≥ gi√° tr·ªã thi·∫øu")
            # Th√™m d√≤ng n√†y ƒë·ªÉ l·∫•y 365 m·∫´u g·∫ßn nh·∫•t khi kh√¥ng c√≥ gi√° tr·ªã thi·∫øu
            maindf = maindf.tail(365)
            st.write(f"ƒê√£ l·ªçc l·∫°i c√≤n {len(maindf)} m·∫´u d·ªØ li·ªáu g·∫ßn nh·∫•t ƒë·ªÉ th·ª±c hi·ªán ti·∫øp")
        
        st.session_state['full_data'] = maindf
        st.session_state['filtered_data'] = maindf[['Open', 'High', 'Low', 'Close']]

except Exception as e:
    st.error(f"C√≥ l·ªói khi x·ª≠ l√Ω d·ªØ li·ªáu: {str(e)}")