import streamlit as st
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import tensorflow as tf
from sklearn.metrics import mean_squared_error, mean_absolute_error
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, LSTM
from deap import base, creator, tools, algorithms
import math
import random
import warnings
import time

random.seed(42)
np.random.seed(42)
tf.random.set_seed(42)
warnings.filterwarnings('ignore')

st.set_page_config(page_title="T·ªëi ∆∞u h√≥a si√™u tham s·ªë b·∫±ng GA", page_icon="üìà")



# # Th√™m n√∫t ƒë·ªÉ x√≥a k·∫øt qu·∫£ v√† ch·∫°y l·∫°i n·∫øu c·∫ßn
# if st.button("X√≥a k·∫øt qu·∫£ v√† ch·∫°y l·∫°i"):
#     # X√≥a c√°c k·∫øt qu·∫£ t·ª´ session state
#     for key in ['optimization_completed', 'best_params', 'best_fitness', 
#                 'best_solutions', 'avg_solutions']:
#         if key in st.session_state:
#             del st.session_state[key]
#     st.rerun()  # Ch·∫°y l·∫°i trang


# Thi·∫øt l·∫≠p background
page_bg_img = """
<style>
[data-testid="stAppViewContainer"] {
    background-image: url("");
    background-size: 100% 100%;
}
[data-testid="stHeader"]{
    background: rgba(0,0,0,0);
}
[data-testid="stToolbar"]{
    right:2rem;
}
[data-testid="stSidebar"] > div:first-child {
    background-image: url("https://drive.google.com/file/d/1HsEqY3G5e-jMDVjlxqD51DBHg-_vbD2I/view?usp=sharing");
    background-position: center;
}
</style>
"""
st.markdown(page_bg_img, unsafe_allow_html=True)

st.title("T·ªëi ∆∞u h√≥a si√™u tham s·ªë b·∫±ng Genetic Algorithm")

# Ki·ªÉm tra d·ªØ li·ªáu
required_keys = ['train_data', 'valid_data', 'test_data', 'best_lag']
if not all(key in st.session_state for key in required_keys):
    st.warning("‚ö†Ô∏è Vui l√≤ng th·ª±c hi·ªán c√°c b∆∞·ªõc tr∆∞·ªõc ƒë√≥!")
    st.stop()

# 1. Chu·∫©n b·ªã d·ªØ li·ªáu
st.header("1. Chu·∫©n b·ªã d·ªØ li·ªáu cho LSTM")

@st.cache_data
def create_dataset(data, lag_order):
    dataX, dataY = [], []
    for i in range(len(data) - lag_order - 1):
        a = data[i:(i + lag_order), :]
        dataX.append(a)
        dataY.append(data[i + lag_order, :])
    return np.array(dataX), np.array(dataY)

# L·∫•y d·ªØ li·ªáu t·ª´ session state
train_data = st.session_state['train_data']
valid_data = st.session_state['valid_data']
test_data = st.session_state['test_data']
lag_order = st.session_state['best_lag']

# T·∫°o dataset
with st.spinner("ƒêang chu·∫©n b·ªã d·ªØ li·ªáu..."):
    X_train, y_train = create_dataset(train_data.values, lag_order)
    X_valid, y_valid = create_dataset(valid_data.values, lag_order)
    X_test, y_test = create_dataset(test_data.values, lag_order)

    # Reshape d·ªØ li·ªáu
    X_train = X_train.reshape(X_train.shape[0], X_train.shape[1], X_train.shape[2])
    X_valid = X_valid.reshape(X_valid.shape[0], X_valid.shape[1], X_valid.shape[2])
    X_test = X_test.reshape(X_test.shape[0], X_test.shape[1], X_test.shape[2])

# Hi·ªÉn th·ªã th√¥ng tin v·ªÅ shape c·ªßa d·ªØ li·ªáu
col1, col2, col3 = st.columns(3)
with col1:
    st.metric("Train shape", f"{X_train.shape}")
with col2:
    st.metric("Validation shape", f"{X_valid.shape}")
with col3:
    st.metric("Test shape", f"{X_test.shape}")

# 2. Thi·∫øt l·∫≠p GA
st.header("2. Thi·∫øt l·∫≠p Genetic Algorithm")

# Tham s·ªë GA
n_dimensions = 3
POPULATION_SIZE = max(4 + int(3 * np.log(n_dimensions)), 15)
N_GENERATIONS = 7

P_CROSSOVER = 0.8
P_MUTATION = 1.0 / n_dimensions

# Hi·ªÉn th·ªã tham s·ªë GA
col1, col2 = st.columns(2)
with col1:
    st.write("**Tham s·ªë c∆° b·∫£n:**")
    st.write(f"- S·ªë chi·ªÅu: {n_dimensions}")
    st.write(f"- K√≠ch th∆∞·ªõc qu·∫ßn th·ªÉ: {POPULATION_SIZE}")
    st.write(f"- S·ªë th·∫ø h·ªá: {N_GENERATIONS}")
with col2:
    st.write("**X√°c su·∫•t:**")
    st.write(f"- X√°c su·∫•t lai gh√©p: {P_CROSSOVER:.2f}")
    st.write(f"- X√°c su·∫•t ƒë·ªôt bi·∫øn: {P_MUTATION:.2f}")

# 3. Th·ª±c hi·ªán t·ªëi ∆∞u h√≥a
st.header("3. T·ªëi ∆∞u h√≥a si√™u tham s·ªë")

def evaluate(individual):
    epochs = int(individual[0])
    batch_size = int(individual[1])
    n_neurons = int(individual[2])

    model = Sequential()
    model.add(LSTM(n_neurons, input_shape=(X_train.shape[1], X_train.shape[2]), activation='relu'))
    model.add(Dense(4))
    model.compile(loss='mean_squared_error', optimizer='adam')

    model.fit(X_train, y_train, epochs=epochs, batch_size=batch_size, verbose=0, validation_data=(X_valid, y_valid))
    
    test_predict = model.predict(X_test)
    mse = mean_squared_error(y_test, test_predict)
    rmse = math.sqrt(mse)
    
    return (rmse,)

# Kh·ªüi t·∫°o bi·∫øn d·ª´ng ti·∫øn tr√¨nh n·∫øu ch∆∞a c√≥
if 'stop_optimization' not in st.session_state:
    st.session_state.stop_optimization = False

# N√∫t b·∫Øt ƒë·∫ßu t·ªëi ∆∞u h√≥a
if st.button("B·∫Øt ƒë·∫ßu t·ªëi ∆∞u h√≥a"):
    # Kh·ªüi t·∫°o bi·∫øn d·ª´ng ti·∫øn tr√¨nh
    st.session_state.stop_optimization = False  # ƒê·∫∑t l·∫°i th√†nh False khi b·∫Øt ƒë·∫ßu t·ªëi ∆∞u h√≥a

    # N√∫t d·ª´ng ti·∫øn tr√¨nh
    if st.button("D·ª´ng ti·∫øn tr√¨nh"):
        st.session_state.stop_optimization = True

    with st.spinner("ƒêang th·ª±c hi·ªán t·ªëi ∆∞u h√≥a..."):
        start_time_optimization = time.time()  # B·∫Øt ƒë·∫ßu th·ªùi gian t·ªëi ∆∞u h√≥a
        
        # Thi·∫øt l·∫≠p GA
        creator.create("FitnessMin", base.Fitness, weights=(-1.0,))
        creator.create("Individual", list, fitness=creator.FitnessMin)
        
        toolbox = base.Toolbox()
        
        # ƒê·ªãnh nghƒ©a c√°c h√†m
        toolbox.register("epochs", np.random.randint, 10, 101)
        toolbox.register("batch_size", np.random.randint, 16, 65)
        toolbox.register("n_neurons", np.random.randint, 32, 201)
        
        # Kh·ªüi t·∫°o c√° th·ªÉ v√† qu·∫ßn th·ªÉ
        def init_individual():
            return [toolbox.epochs(), toolbox.batch_size(), toolbox.n_neurons()]
        
        toolbox.register("individual", tools.initIterate, creator.Individual, init_individual)
        toolbox.register("population", tools.initRepeat, list, toolbox.individual)
        
        # ƒêƒÉng k√Ω c√°c operators
        toolbox.register("evaluate", evaluate)
        toolbox.register("select", tools.selTournament, tournsize=3)
        toolbox.register("mate", tools.cxBlend, alpha=0.5)
        toolbox.register("mutate", tools.mutGaussian, mu=0, sigma=1, indpb=0.2)
        
        # Kh·ªüi t·∫°o qu·∫ßn th·ªÉ
        population = toolbox.population(n=POPULATION_SIZE)
        best_solutions = []
        avg_solutions = []
        
        # Ch·∫°y GA
        progress_bar = st.progress(0)
        status_text = st.empty()
        
        ngens = 7  # S·ªë th·∫ø h·ªá
        for gen in range(ngens): 
            # C·∫≠p nh·∫≠t ti·∫øn tr√¨nh
            progress = (gen + 1) / ngens
            progress_bar.progress(progress)
            status_text.text(f"ƒêang x·ª≠ l√Ω th·∫ø h·ªá {gen + 1}/{ngens}")

            # Ch·ªçn l·ªçc
            offspring = toolbox.select(population, len(population))
            offspring = list(map(toolbox.clone, offspring))
            
            # Lai gh√©p ch√©o
            for child1, child2 in zip(offspring[::2], offspring[1::2]):
                if np.random.random() < P_CROSSOVER:
                    toolbox.mate(child1, child2)
                    del child1.fitness.values
                    del child2.fitness.values
                    # ƒê·∫£m b·∫£o gi√° tr·ªã trong kho·∫£ng h·ª£p l√Ω
                    child1[:] = [max(10, min(200, int(x))) for x in child1]
                    child2[:] = [max(10, min(200, int(x))) for x in child2]
            
            # ƒê·ªôt bi·∫øn
            for mutant in offspring:
                if np.random.random() < P_MUTATION:
                    toolbox.mutate(mutant)
                    del mutant.fitness.values
                    mutant[:] = [max(10, min(200, int(x))) for x in mutant]
            
            # ƒê√°nh gi√° fitness
            invalid_ind = [ind for ind in offspring if not ind.fitness.valid]
            fitnesses = map(toolbox.evaluate, invalid_ind)
            for ind, fit in zip(invalid_ind, fitnesses):
                ind.fitness.values = fit
            
            # C·∫≠p nh·∫≠t qu·∫ßn th·ªÉ
            population[:] = offspring
            
            # L∆∞u th·ªëng k√™
            fits = [ind.fitness.values[0] for ind in population]
            best_solutions.append(min(fits))
            avg_solutions.append(sum(fits) / len(fits))

        # L·∫•y c√° th·ªÉ t·ªët nh·∫•t
        fits = [ind.fitness.values[0] for ind in population]
        best_idx = np.argmin(fits)
        best_individual = population[best_idx]
        best_fitness = fits[best_idx]
        
        # L∆∞u t·∫•t c·∫£ k·∫øt qu·∫£ v√†o session state
        st.session_state['optimization_completed'] = True
        st.session_state['best_params'] = {
            'epochs': int(best_individual[0]),
            'batch_size': int(best_individual[1]),
            'n_neurons': int(best_individual[2])
        }

        # L∆∞u d·ªØ li·ªáu train/valid/test
        st.session_state['X_train'] = X_train
        st.session_state['y_train'] = y_train
        st.session_state['X_valid'] = X_valid
        st.session_state['y_valid'] = y_valid
        st.session_state['X_test'] = X_test
        st.session_state['y_test'] = y_test
    
        st.session_state['best_fitness'] = float(best_fitness)
        st.session_state['best_solutions'] = best_solutions
        st.session_state['avg_solutions'] = avg_solutions
        
        end_time_optimization = time.time()  # K·∫øt th√∫c th·ªùi gian t·ªëi ∆∞u h√≥a
        st.session_state['optimization_time'] = end_time_optimization - start_time_optimization  # L∆∞u v√†o session_state


# Th√™m n√∫t ƒë·ªÉ h·ªèi ng∆∞·ªùi d√πng c√≥ mu·ªën xem k·∫øt qu·∫£ ƒë√£ ch·∫°y t·ª´ tr∆∞·ªõc kh√¥ng
# if st.session_state.stop_optimization:
if st.button("Xem k·∫øt qu·∫£ ƒë√£ ch·∫°y s·∫µn tr∆∞·ªõc ƒë√≥"):
    # Ki·ªÉm tra xem file ƒë√£ t·∫£i l√™n c√≥ kh·ªõp v·ªõi t·∫≠p d·ªØ li·ªáu ƒë√£ ch·ªçn kh√¥ng
    if 'uploaded_file' in st.session_state:
        uploaded_file_name = st.session_state['uploaded_file'].name
        
    # Hi·ªÉn th·ªã h√¨nh ·∫£nh t∆∞∆°ng ·ª©ng v·ªõi file ƒë√£ t·∫£i l√™n
        if uploaded_file_name == 'BTC-USD.csv':
            st.image("images/btc_toiuu.png", caption="D·ªØ li·ªáu BTC-USD")
        elif uploaded_file_name == 'ETH-USD.csv':
            st.image("images/eth_toiuu.png", caption="D·ªØ li·ªáu ETH-USD")
        elif uploaded_file_name == 'LTC-USD.csv':
            st.image("images/ltc_toiuu.png", caption="D·ªØ li·ªáu LTC-USD")
        elif uploaded_file_name == 'XRP-USD.csv':
            st.image("images/xrp_toiuu.png", caption="D·ªØ li·ªáu XRP-USD")
        else:
            st.warning("‚ö†Ô∏è D·ªØ li·ªáu kh√¥ng x√°c ƒë·ªãnh!")
    else:
        st.warning("‚ö†Ô∏è Ch∆∞a c√≥ file n√†o ƒë∆∞·ª£c t·∫£i l√™n.")

# Hi·ªÉn th·ªã k·∫øt qu·∫£ n·∫øu ƒë√£ ho√†n th√†nh t·ªëi ∆∞u h√≥a
if 'optimization_completed' in st.session_state and st.session_state['optimization_completed']:
    st.success("‚úÖ ƒê√£ ho√†n th√†nh t·ªëi ∆∞u h√≥a!")
    st.metric("Th·ªùi gian t·ªëi ∆∞u h√≥a", f"{st.session_state['optimization_time']:.2f} gi√¢y")
    
    # Hi·ªÉn th·ªã tham s·ªë t·ªëi ∆∞u
    st.write("**Tham s·ªë t·ªëi ∆∞u:**")
    st.write(f"- Epochs: {st.session_state['best_params']['epochs']}")
    st.write(f"- Batch size: {st.session_state['best_params']['batch_size']}")
    st.write(f"- S·ªë neurons: {st.session_state['best_params']['n_neurons']}")
    st.write(f"- RMSE t·ªët nh·∫•t: {st.session_state['best_fitness']:.4f}")

    # V·∫Ω bi·ªÉu ƒë·ªì ti·∫øn h√≥a
    fig, ax = plt.subplots(figsize=(10, 6))
    generations = range(1, len(st.session_state['best_solutions']) + 1)
    ax.plot(generations, st.session_state['best_solutions'], 'b-', label='Best Fitness')
    ax.plot(generations, st.session_state['avg_solutions'], 'r--', label='Average Fitness')
    ax.set_xlabel('Th·∫ø h·ªá')
    ax.set_ylabel('Fitness (RMSE)')
    ax.set_title('Ti·∫øn tr√¨nh t·ªëi ∆∞u h√≥a GA')
    ax.legend()
    ax.grid(True)
    st.pyplot(fig)

    # Th√™m n√∫t ƒë·ªÉ x√≥a k·∫øt qu·∫£ v√† ch·∫°y l·∫°i n·∫øu c·∫ßn
    if st.button("X√≥a k·∫øt qu·∫£ v√† ch·∫°y l·∫°i"):
        # X√≥a c√°c k·∫øt qu·∫£ t·ª´ session state
        for key in ['optimization_completed', 'best_params', 'best_fitness', 
                    'best_solutions', 'avg_solutions']:
            if key in st.session_state:
                del st.session_state[key]
        st.rerun()  # Ch·∫°y l·∫°i trang


